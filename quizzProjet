<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Auto Correction</title>
    <link rel="stylesheet" href="quizz.css">
    <script src="quizz.js"></script>
</head>
  
<body>
    <h1>Auto Correction</h1>
    <input type="text" placeholder="Filter...ü•áü•àü•â" oninput="filterQuestions(this.value)">
    <div id="custom-questions-container"></div>
</body>
</html>
    
----------------------------------------------

    body {
    background-color: #296ca8;
    color: white;
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
}

input {
    background-color: white;
    color: black;
    padding: 10px;
    margin: 10px;
    border: 1px solid black;
    border-radius: 5px;
    font-size: 16px;
    width: 58%;
}

#custom-questions-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 70%;
}

.custom-question-container {
    background-color: #4992d3;
    color: white;
    padding: 20px;
    margin: 10px 0;
    border-radius: 5px;
    border: silver;
    width: 80%;
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
}

.custom-difficulty-circle {
    position: absolute;
    top: -15px;
    left: -15px;
    width: 30px;
    height: 30px;
    background-color: white;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 20px;
    cursor: pointer;
}

.custom-answer-container {
    color: white;
    display: none;
    margin-top: 10px;
    text-align: center;
    position: absolute;
    bottom: 0%;
    font-size: small;
}

.custom-question-container:hover .custom-answer-container {
    display: flex;
}

.custom-question-container p {
    margin: 0;
}
    
--------------
  
    let currentPage = 1; 
let filterText = ''; 
let difficultyFilter = ''; 
let allQuestionsLoaded = false; 

document.addEventListener('DOMContentLoaded', function () {
    loadQuestions();
    
    window.addEventListener('scroll', loadMoreAutomatically);
});

function loadQuestions() {
    if (!allQuestionsLoaded) {
        const apiUrl = `https://opentdb.com/api.php?amount=100&page=${currentPage}&type=multiple`;

        fetch(apiUrl)
            .then(response => response.json())
            .then(data => {
                const filteredQuestions = data.results.filter(question => {
                    const keywordMatch = filterText === '' || decodeEntities(question.question.toLowerCase()).includes(filterText.toLowerCase());
                    const difficultyMatch = difficultyFilter === '' || question.difficulty.toLowerCase() === difficultyFilter;
                    return keywordMatch && difficultyMatch;
                });

                displayQuestions(filteredQuestions);

                if (data.results.length === 0) {
                    allQuestionsLoaded = true;
                }
            })
            .catch(error => console.error('Erreur lors de la r√©cup√©ration des questions:', error));
    }
}

function displayQuestions(questions) {
    const questionsContainer = document.getElementById('custom-questions-container');

    if (currentPage === 1) {
        questionsContainer.innerHTML = '';
    }

    questions.forEach(function (question) {
        const questionContainer = document.createElement('div');
        questionContainer.classList.add('custom-question-container');
        questionContainer.dataset.correctAnswer = question.correct_answer;

        const difficultyCircle = document.createElement('div');
        difficultyCircle.classList.add('custom-difficulty-circle');
        difficultyCircle.textContent = getDifficultyEmoji(question.difficulty);
        questionContainer.appendChild(difficultyCircle);

        const questionText = document.createElement('p');
        questionText.innerHTML = question.question;
        questionContainer.appendChild(questionText);

        const answerContainer = document.createElement('div');
        answerContainer.classList.add('custom-answer-container');
        answerContainer.innerHTML = `<p>‚ùé ${question.correct_answer}</p>`;
        questionContainer.appendChild(answerContainer);

        difficultyCircle.addEventListener('mouseenter', function () {
            answerContainer.style.display = 'flex';
        });

        difficultyCircle.addEventListener('mouseleave', function () {
            answerContainer.style.display = 'none';
        });

        questionsContainer.appendChild(questionContainer);
    });

 
    currentPage++;
}

function loadMoreAutomatically() {
    if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {
        loadQuestions();
    }
}

function filterQuestions(filterText) {
    const medalMatch = filterText.match(/ü•á|ü•â|ü•à/);

    if (medalMatch) {
        difficultyFilter = '';
        const medalMap = { 'ü•á': 'hard', 'ü•â': 'easy', 'ü•à': 'medium' };
        difficultyFilter = medalMap[medalMatch[0]];
        filterText = filterText.replace(medalMatch[0], '').trim();
    } else {
        filterText = filterText;
        difficultyFilter = '';
    }

    currentPage = 1;
    allQuestionsLoaded = false;

    loadQuestions();
}

function decodeEntities(encodedString) {
    const textArea = document.createElement('textarea');
    textArea.innerHTML = encodedString;
    return textArea.value;
}

function getDifficultyEmoji(difficulty) {
    const difficultyEmojiMap = { easy: 'ü•â', medium: 'ü•à', hard: 'ü•á' };
    return difficultyEmojiMap[difficulty.toLowerCase()] || '';
}
